library(IPDfromKM)
library(survRM2)
library(dplyr)
library(flexsurv)
library(survHE)
library(readxl)

setwd("~/ANALITYKA/AOTMiT/TLI2/ANALIZA_LYG/TLI2_LYG/Tukysa_Zachariasz")

table_at_risk <- read_excel("table_at_risk.xlsx") #wczytaj dane z tabeli at risk

lek <- "tuksya" #wpisz etykiete leku

min_x = 0	 	                                            #wstaw minimalną wartość osi x
max_x = 36	                                            #wstaw maksymalną wartość osi x
min_y = 0		                                            #wstaw minimalną wartość osi y
max_y = 1

nrisk_arm0 <- table_at_risk$nrisk_arm0 #wczytaj kolumne nrisk_arm0 z tabeli table_at_risk
nrisk_arm1 <- table_at_risk$nrisk_arm1
time_risk =  table_at_risk$time_risk

label_arm0 = 'Tuc+Cap+Tra' #wprowadź nazwę dla ramienia 0
label_arm1 = 'Pbo+Cap+Tra'


#interval = 6 	                                          #wstaw interwał czasowy, w jakim chcesz otrzymać oszacowane prawdopodobieństwo przeżycia
#quantile = c(0.75,0.5,0.25)	                            #wstaw udział pacjentów, dla których chcesz otrzymać czas przeżycia
#arms = 2			                                          #wstaw liczbę ramion w badaniu (maks. 2 ramiona)


#Rekonstrukcja danych
getpoints_arm0 <- getpoints("image.png",
                            x1 = min_x,
                            x2 = max_x,
                            y1 = min_y,
                            y2 = max_y)

getpoints_arm1 <- getpoints("image.png",
                            x1 = min_x,
                            x2 = max_x,
                            y1 = min_y,
                            y2 = max_y)

dir.create(path = paste0( # utwórz folder z wynikami
  lek,  #etykieta leku
  "_R")) #rozszerzenie nazwy folderu

setwd(paste0("~/ANALITYKA/AOTMiT/TLI2/ANALIZA_LYG/TLI2_LYG/Tukysa_Zachariasz/", #wybierz katalog roboczy z utworzonego folderu
             lek,
             "_R"))

write.csv2(getpoints_arm0, "getpoints_arm0.csv",  row.names = F) #zapisz wynik funkcji getpoints
write.csv2(getpoints_arm1, "getpoints_arm1.csv", row.names = F)

#przetwarzanie danych - argumenty stanowią przypisane wcześniej obiekty
preprocess_arm0  =  preprocess(getpoints_arm0,
                               trisk = time_risk,
                               nrisk = nrisk_arm0,
                               totalpts = nrisk_arm0[1],
                               maxy = max_y)
preprocess_arm1 = preprocess(getpoints_arm1,
                             trisk = time_risk,
                             nrisk = nrisk_arm1,
                             totalpts = nrisk_arm1[1],
                             maxy = max_y)
getIPD_arm0 <-
  getIPD(preprocess_arm0,
         armID = 1)
getIPD_arm1 <-
  getIPD(preprocess_arm1,
         armID = 2)

#utwórz data frame z uzyskanymi danymi IPD
ipd <- rbind( 
  data.frame(getIPD_arm0$IPD, "arm" = "0", "group" = label_arm0),
  data.frame(getIPD_arm1$IPD, "arm" = "1", "group" = label_arm1))
write.csv2(ipd, "IPD.csv", row.names = F)

#RMST

#przetwarzanie danych pod analizę 
ipd_lyg <- data.frame(ipd,"arm_to_lyg" =  ifelse(ipd$arm == 0,1,0))

#analiza LYG w horyzoncie rocznym
rmean12 <- rmst2(time = ipd_lyg$time, status = ipd_lyg$status, ipd_lyg$arm_to_lyg, tau = 12)
RMST_arm0_12 <- rmean12$RMST.arm0$rmst[-2]
RMST_arm1_12 <- rmean12$RMST.arm1$rmst[-2]
LYG_12 <- rmean12$unadjusted.result[1,1:3]
LYG_12_table <- rbind(RMST_arm0_12, RMST_arm1_12, lyg_12, deparse.level = 1) 
row.names(LYG_12_table) <- c("RMST_arm0", "RMST_arm1", "LYG")
colnames(LYG_12_table) <- c("tau = 12", "0.95 LCI", "0.95UCI")
write.csv2(LYG_12_table, "LYG_12_table.csv", row.names = F)

#analiza LYG w horyzoncie badania

#rbind(RMST_arm0_12, RMST_arm1_12, lyg_12)
rmean <- rmst2(time = ipd_lyg$time, status = ipd_lyg$status, ipd_lyg$arm_to_lyg) #utwórz model rmean
RMST_arm0 <- rmean$RMST.arm0$rmst[-2] #wyciągnij dane z modelu rmean dla ramienia 0
RMST_arm1 <- rmean$RMST.arm1$rmst[-2]
LYG <- rmean$unadjusted.result[1,1:3]
LYG_table <- rbind(RMST_arm0, RMST_arm1, LYG, deparse.level = 1) #utwórz tabele z wynikami LYG 
colnames(LYG_table) <- c(paste0("tau = ",round(rmean$tau,2)), "0.95 LCI", "0.95UCI") #zmień nazwy column w tabeli
write.csv2(LYG_12, "LYG_table.csv", row.names = F)

LYG_observal_data <- cbind(LYG_12_table, LYG_table) #zbinduj utworzone wcześniej tabele
write.csv2(LYG_observal_data, "LYG_observal_data.csv", row.names = F) #zapisz tabele z danymi LYG w horyzoncie badania

#Ekstrapolacja

mods <- c("weibull") #wybierz rozkład parametryczny
formula <- Surv(time, status) ~ as.factor(group) #utwórz formule do modelu

#zbuduj model z rozkladem weibulla
m1 <- fit.models(formula,
                 data = ipd,
                 distr =  "weibull")

#utworz obiekt z wykresem
p <- plot(m1,
          add.km = T, 
          lab.profile = c(label_arm0, label_arm1),
          annotate = T,
          t = seq(.1, 100))+
  theme(panel.grid.minor.y = element_blank())+
  scale_y_continuous(breaks=c(0, 0.1, 0.25, 0.5, 0.75, 1)) +
  geom_hline(yintercept=0.1, linetype="dashed", color = "deepskyblue4")

#reaktywuj wykres
ggplotly(p, tooltip = T, dynamicTicks = T)

#RMST dla ekstrapolacji

flexweibull <- flexsurvreg(Surv(time, status) ~ arm, data = ipd, dist = "weibull")

flex_rmst_arm0 <- summary(flexweibull, type = "rmst", t = 52.1) #jako argument t wprowadź przybliżoną wartość funckji przeżycia na poziomie 10%
flex_rmst_arm1 <- summary(flexweibull, type = "rmst", t = 39.1)


flex_rmst_arm0 <- flex_rmst[1]$`arm=0` #utwórz obiekt z wartością RMST dla ramienia 0
flex_rmst_arm1 <- flex_rmst[2]$`arm=1`


paste0(lek,"_weibull")

LYG_weibull = rbind(flex_rmst_arm0, #zbinduj dane
                    flex_rmst_arm1) %>%
  round(2)
#zmien nazwy kolumn
colnames(LYG_weibull) <- c("",paste0("tau = ", flex_rmst_arm0[1]$time), "0.95 LCI", "0.95 UCI")
LYG_weibull <- LYG_weibull[2:4] #wybierz kolumny w zakresie 2:4 
write.csv2(LYG_weibull, "LYG_weibull.csv", row.names = F)


#####################################


colnames(bavencio_weibull) <- c("Tau", "Est.", "LCI 0.95", "UCI 0.95")
row.names(bavencio_weibull) <- c(paste("RMST:",label_arm0), paste("RMST:",label_arm1))

write.csv2(bavencio_weibull, "bavencio_weibull.csv")





paste0("tau = ",LYG_weibull$time[1])










setwd("~/ANALITYKA/AOTMiT/2021.01.2020_FUNDUSZ MEDYCZNY/1 BAVENCIO/R")

ipd_bavencio <- rekonstrukcja_ipd('image.PNG', time_risk, nrisk_arm0, nrisk_arm1, label_arm0, label_arm1)

ipd <- ipd_bavencio$ipd

write.csv(ipd_bavencio$getpoints_arm0, "bavencio_getpoints_arm0.csv", row.names = F)
write.csv(ipd_bavencio$getpoints_arm1, "bavencio_getpoints_arm1.csv", row.names = F)
write.csv(ipd_bavencio$ipd, "bavencio_ipd.csv", row.names = F)


#pole pod KM

bavencio_12 <- analiza_lyg(ipd, tau = 12)
bavencio_12$LYG_table %>%
  write.csv2("bavencio_12.csv")


bavencio_tau <- analiza_lyg(ipd, tau = NULL)
bavencio_tau$LYG_table %>%
  write.csv2("bavencio_tau.csv")

#ekstrapolacja


mods <- c("weibull")
formula <- Surv(time, status) ~ as.factor(group)
m1 <- fit.models(formula,
                 data = ipd,
                 distr =  "weibull")

p <- plot(m1,
          add.km = T, 
          lab.profile = c(label_arm0, label_arm1),
          annotate = T,
          t = seq(.1, 100))+
  theme(panel.grid.minor.y = element_blank())+
  scale_y_continuous(breaks=c(0, 0.1, 0.25, 0.5, 0.75, 1)) +
  geom_hline(yintercept=0.1, linetype="dashed", color = "deepskyblue4")
ggplotly(p, tooltip = T, dynamicTicks = T)

#RMST dla ekstrapolacji

flexweibull <- flexsurvreg(Surv(time, status) ~ arm, data = ipd, dist = "weibull")
flex_rmst <- summary(flexweibull, type = "rmst", t = 48.1)

flex_rmst_arm0 <- flex_rmst[1]
flex_rmst_arm1 <- flex_rmst[2]


bavencio_weibull = rbind(flex_rmst$`arm=0`, 
                         flex_rmst$`arm=1`) %>%
  round(2)

colnames(bavencio_weibull) <- c("Tau", "Est.", "LCI 0.95", "UCI 0.95")
row.names(bavencio_weibull) <- c(paste("RMST:",label_arm0), paste("RMST:",label_arm1))

write.csv2(bavencio_weibull, "bavencio_weibull.csv")
